}
}
Gini(pred_glmtest)
Gini(perf_test)
Gini(pred_glmtrain)
Gini(perf_train)
target_train = data_model_imputed_for_glm[train,]$nb_ET
explanatory_train = data_model_imputed_for_glm[train,]%>%
select(-nb_ET)%>%as.matrix
target_test = data_model_imputed_for_glm[-train,]$nb_ET
explanatory_test = data_model_imputed_for_glm[-train,]%>%
select(-nb_ET)%>%as.matrix
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-05,#par défaut
maxit=1e5)
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
# Distribution des coefficients en fonction du lambda.
plot(glmnet_model, xvar='lambda',label=T)
s=sample(glmnet_model$lambda,1)
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-05,#par défaut
maxit=1e6)
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
# Distribution des coefficients en fonction du lambda.
plot(glmnet_model, xvar='lambda',label=T)
s=sample(glmnet_model$lambda,1)
smin=min(glmnet_model$lambda)
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin=",smin,"Gini=",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s)[,1],obs=target_test)
print(paste("s=random",s,"Gini=",Gini(pred_glmnettest)))
3e-5
plot(glmnet_cv)
gbm_model <- gbm(nb_ET~.,data=data_model[train,])
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T)
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T,train.fraction=.8)
pred_gbmtest=data.frame(pred=predict(gbm_model,newdata = data_model[-train,]),obs=target_test)
print(paste("gbm:",Gini(pred_glmnettest)))
print(paste("gbm:",Gini(pred_gbmtest)))
print(paste("gbm:",Gini(pred_glmnettest)))
print(paste("glm:",Gini(pred_gbmtest)))
print(paste("glm:",Gini(pred_glmnettest)))
params=c(shrinkage=.1,
nb_trees=1000,
depth=10,
nminobs=10,
bag.frac=.2)
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T,train.fraction=.8,shrinkage = params[1],n.trees = params[2],interaction.depth = params[3],n.minobsinnode = params[4],bag.fraction = params[5])
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,],
n.trees=params[2]),
obs=target_test)
print(paste("gbm:",Gini(pred_gbmtest)))
print(paste("glm:",Gini(pred_glmnettest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,],
n.trees=params[2]),
obs=target_train)
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,ntrees=params[2],
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,n.trees=params[2],
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
params=c(shrinkage=.01,
nb_trees=1000,
depth=10,
nminobs=10,
bag.frac=.2)
gbm_model <- gbm(nb_ET~.
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_glmnet_points
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_gbm_points
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_gbm_points
g <- g +
geom_line(data = Lorenz_gbm_points,
aes(x=x100,y=y100,color="gbm"))
g%>%ggplotly
summary(gbm_model)
vars=summary(gbm_model)
vars=summary(gbm_model)$var
plot(gbm_model,i.var=vars[1])
vars
vars=summary(gbm_model)$var%>%as.character
plot(gbm_model,i.var=vars[1])
plot(gbm_model,i.var=vars[1])
plot(gbm_model,i.var=vars[2])
plot(gbm_model,i.var=vars[3])
plot(gbm_model,i.var=vars[4])
monotony=rep(0,ncol(data_model)-1)
names(monotony) <- setdiff(names(data_model),"nb_ET")
monotony
monotony["NBMENFISC14"] <- 1
monotony
gbm_model <- gbm(nb_ET~.
,var.monotone = monotony
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
gbm_model <- gbm(nb_ET~.
,var.monotone = monotony
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
print(head(sample(10000,1000)))
print(head(sample(10000,1000)))
a=rnorm(1000)
a
plot(quantile(a,0:100/100))
line(c(0,1),c(0,1))
lines(c(0,1),c(0,1))
lines(c(0,100),c(-4,4))
install.packages("arsenal")
library(arsenal)
DIR=read.csv("../../DIR.csv")
library(cartography)
library(sp)
data("nuts2006")
nuts2.df$unemprate <- nuts2.df$unemp2008/nuts2.df$act2008*100
choroLayer(spdf = nuts2.spdf,
df = nuts2.df,
var = "unemprate")
myfunc <- function(a,b){
a+b^2
}
myfunc(1,2)
myfunc(c(1,2,3,5),2)
myfunc(c(1,2,3,5),rep(2,4))
myfunc(c(1,2,3,5),rep(2,4<))
myfunc(c(1,2,3,5),rep(2,4))
c <- myfunc(c(1,2,3,5),rep(2,4))
View(DIR)
View(nuts2.spdf)
View(DIR)
View(nuts2.spdf@data)
View(nuts0.df)
memory.size(DIR)
memory.size("DIR")
object.size(DIR)
library(dplyr)
library(dplyr)
library(dplyr)
load("~/R_initiation_juin2018/1_data_management_dplyr/fichiers_prepared.RData")
load("1_data_management_dplyr/fichiers_prepared.RData")
View(finess_et)
View(finess_geo)
View(insee)
select(finess_et,SIRET,dep)
finess_et%>%
select(SIRET,dep)
finess_et%>%
select(SIRET,dep)%>%
distinct()
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
mutate(proportion=nombre/sum(nombre))
decompte_finess_dep=finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n()) -> decompte_finess_dep
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(value = .,x = "decompte_finess_dep")
rm(decompte_finess_dep)
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(value = .,x = "decompte_finess_dep")
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(value = .,x = "decompte_finess_dep")
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(x = "decompte_finess_dep")
decompte_finess_dep
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(x = "decompte_finess_dep",value = .)
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
assign(x = "decompte_finess_dep",value = .,envir = globalenv())
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
mutate(proportion=nombre/sum(nombre))-> decompte_finess_dep
insee%>%
select(CODGEO,MED14)%>%
mutate(dep=substr(CODGEO,1,2))
insee%>%
select(CODGEO,MED14)%>%
mutate(dep=substr(CODGEO,1,2))%>%
group_by(dep)%>%
summarise(moyenne=mean(MED14,na.rm=TRUE),
sd=sd(MED14,na.rm=TRUE),
q90=quantile(x = MED14,
probs = .9,
na.rm=TRUE))
insee%>%
select(CODGEO,MED14)%>%
mutate(dep=substr(CODGEO,1,2),
MED14=as.numeric(MED14))
insee%>%
select(CODGEO,MED14)%>%
mutate(dep=substr(CODGEO,1,2),
MED14=as.numeric(MED14))%>%
group_by(dep)%>%
summarise(moyenne=mean(MED14,na.rm=TRUE),
sd=sd(MED14,na.rm=TRUE),
q90=quantile(x = MED14,
probs = .9,
na.rm=TRUE))
insee2=insee
insee2$dep=substr(insee$CODGEO,1,2)
finess_et$somme_coord=finess_geo$X+finess_geo$Y
finess_et$somme_coord=as.numeric(finess_geo$X)+as.numeric(finess_geo$Y)
finess_et$somme_coord=as.numeric(finess_geo$X)+as.numeric(finess_geo$Y)
library(ggplot2)
rm("decompte_finess_dep")
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
mutate(proportion=nombre/sum(nombre))%>%
assign(x = "decompte_finess_dep",value=.,envir=globalenv())
library(dplyr)
load("1_data_management_dplyr/fichiers_prepared.RData")
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
mutate(proportion=nombre/sum(nombre))%>%
assign(x = "decompte_finess_dep",value=.,envir=globalenv())
finess_et%>%
select(SIRET,dep)%>%
distinct()%>%
group_by(dep)%>%
summarise(nombre=n())%>%
mutate(proportion=nombre/sum(nombre))%>%
assign(x = "decompte_finess_dep",value=.$proportion,envir=globalenv())
plot_ly(economics, x = ~pop)
library(plotly)
plot_ly(economics, x = ~pop)
plot_ly(economics, x = ~date, y = ~pop)
plot_ly(z = ~volcano)
plot_ly(z = ~volcano, type = "surface")
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
url="https://en.wikipedia.org/wiki/Lists_of_communes_of_France"
library(rvest)
library(dplyr)
url="https://en.wikipedia.org/wiki/Lists_of_communes_of_France"
page_wikipedia=read_html(url)
table_communes_metro=page_wikipedia%>%html_node(".wikitable")%>%html_table()
table_communes_metro
adresse="10 place des 5 martyrs du lycee buffon, Paris"
adresse <- gsub(" ","+",adresse)
url <- sprintf("https://nominatim.openstreetmap.org/search?q=%s&format=xml&polygon=1&addressdetails=1",adresse)
geocode <- read_xml(url)
geocode <- geocode%>%html_node("place")
lat <- geocode%>%html_attr("lat")%>%as.numeric
lon <- geocode%>%html_attr("lon")%>%as.numeric
lat
lon
library(leaflet)
leaflet()%>%addTiles()%>%addMarkers(lng=lon,lat=lat)
leaflet()%>%addTiles()%>%addMarkers(lng=lon,lat=lat,popup = "DREES")
adresse
geocode
url
page_wikipedia%>%html_node("#List_of_places_in_Europe")
page_wikipedia%>%html_node("#List_of_places_in_Europe")%>%html_text()
page_wikipedia%>%html_node(".nowraplinks")%>%html_table()
library(dplyr)
library(ggplot2)
library(plotly)
library(glmnet)
library(gbm)
load("../1_data_management_dplyr/fichiers_prepared.RData")
nb_chiffres_cod_com=nchar(finess_et$cod_com)
nb_chiffres_cod_com%>%table
finess_et[nb_chiffres_cod_com==1,]$cod_com <- paste0("00",finess_et[nb_chiffres_cod_com==1,]$cod_com)
finess_et[nb_chiffres_cod_com==2,]$cod_com <- paste0("0",finess_et[nb_chiffres_cod_com==2,]$cod_com)
finess_et <- finess_et%>%
mutate(CODGEO=paste0(dep,cod_com))
nb_ET_CODGEO=finess_et%>%
group_by(CODGEO)%>%
summarise(nb_ET=n())
sum(!nb_ET_CODGEO$CODGEO%in%insee$CODGEO)
nb_ET_CODGEO=merge(nb_ET_CODGEO,insee,by="CODGEO",all.y=T)
nb_ET_CODGEO <- nb_ET_CODGEO%>%mutate(nb_ET=ifelse(is.na(nb_ET),0,nb_ET))
table(nb_ET_CODGEO$nb_ET)%>%head
data_model <-  nb_ET_CODGEO%>%
select(-LIBGEO,-CODGEO)%>%
mutate_if(is.character,as.numeric)
train=sample(x = nrow(data_model),size = round(.65*nrow(data_model)))
train
nrow(data_model)
1:nrow(data_model)
round(.65*nrow(data_model))
train
data_model_imputed_for_glm[train,]
data_model_imputed_for_glm=data_model%>%
mutate_all(function(x)ifelse(is.na(x),mean(x,na.rm=T),x))
data_model_imputed_for_glm[train,]
model <- glm(nb_ET~.,
data=data_model_imputed_for_glm[train,],
family=poisson(link = "log"))
coeff_glm=summary(model)$coefficients
coeff_glm
coeff_glm
summary(model)
pred_glmtrain=data.frame(pred=predict(model,newdata = data_model_imputed_for_glm[train,],type="response"), obs=data_model[train,]$nb_ET)
perf_train=data.frame(pred=data_model[train,]$nb_ET, obs=data_model[train,]$nb_ET)
pred_glmtest=data.frame(pred=predict(model,newdata = data_model_imputed_for_glm[-train,],type="response"),obs=data_model[-train,]$nb_ET)
perf_test=data.frame(pred=data_model[-train,]$nb_ET, obs=data_model[-train,]$nb_ET)
pred_glmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_glm_points
pred_glmtest%>%
na.omit%>%
arrange(-obs)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Perfection
g <- ggplot()+
geom_line(data = Lorenz_glm_points,
aes(x=x100,y=y100,color="glm"))+
geom_line(data = Perfection,
aes(x=x100,y=y100,color="perfection")) +
geom_line(data=data.frame(x100=c(0,1), yrandom=c(0,1)),
aes(x=x100,y=yrandom,color="random"))
g
Gini=function(pred){
pred%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
# print(paste0("nombre_de_lignes:",nrow(.)," indice de Gini:"))
2*mean(.$y)-1
}
}
Gini(pred_glmtest)
Gini(perf_test)
Gini(pred_glmtrain)
Gini(perf_train)
Gini(pred_glmtest)
Gini(perf_test)
Gini(pred_glmtrain)
Gini(perf_train)
target_train = data_model_imputed_for_glm[train,]$nb_ET
explanatory_train = data_model_imputed_for_glm[train,]%>%
select(-nb_ET)%>%as.matrix
target_test = data_model_imputed_for_glm[-train,]$nb_ET
explanatory_test = data_model_imputed_for_glm[-train,]%>%
select(-nb_ET)%>%as.matrix
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-06,#par défaut
maxit=1e7)
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
b=c("bonjour","merci","au revoir")
rep(b,a)
a=3
a
b=c("bonjour","merci","au revoir")
b
rep(b,a)
rep.int(x = b,times=a)
rep(x = b,times=a)

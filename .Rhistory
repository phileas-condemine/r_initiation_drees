pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(Gini(pred_glmnettest))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(Gini(pred_glmnettest))
})
}
NFOLDS=5
Gini=function(pred){
pred%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
# print(paste0("nombre_de_lignes:",nrow(.)," indice de Gini:"))
2*mean(.$y)-1
}
}
Gini(pred_glmtest)
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "gaussian",#'poisson',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
# type.measure = "deviance",
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 5e3)
for (alpha in 0:10/10){
print(alpha)
rm(glmnet_model,pred_glmnettest)
tryCatch({
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "gaussian",#'poisson',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
# type.measure = "deviance",
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 5e3)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
})
}
for (alpha in 0:10/10){
print(alpha)
rm(glmnet_model,pred_glmnettest)
tryCatch({
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "poisson",#'gaussian',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
type.measure = "deviance",#'rmse'
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 1e4)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
})
}
NFOLDS=1
for (alpha in 0:10/10){
print(alpha)
rm(glmnet_model,pred_glmnettest)
tryCatch({
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "poisson",#'gaussian',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
type.measure = "deviance",#'rmse'
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 1e4)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
})
}
rm(glmnet_model,pred_glmnettest)
tryCatch(rm(glmnet_model,pred_glmnettest),print)
tryCatch(rm(glmnet_model,pred_glmnettest),warning = function(w) {
print(paste("warning",w))
}, error = function(e) {
print(paste("error",e))
})
for (alpha in 0:10/10){
print(alpha)
tryCatch(rm(glmnet_model,pred_glmnettest),warning = function(w) {
print(paste("warning",w))
}, error = function(e) {
print(paste("error",e))
})
tryCatch({
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "poisson",#'gaussian',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
type.measure = "deviance",#'rmse'
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 1e4)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
})
}
NFOLDS=10
for (alpha in 0:10/10){
print(alpha)
tryCatch(rm(glmnet_model,pred_glmnettest),warning = function(w) {
print(paste("warning",w))
}, error = function(e) {
print(paste("error",e))
})
tryCatch({
glmnet_model = cv.glmnet(x = explanatory_train, y = target_train,
family = "poisson",#'gaussian',
# Pénalisation L1 100%
alpha = alpha,
# On s'intéresse à la deviance - on suppose que la distribution conditionnelle suit une loi de Poisson
type.measure = "deviance",#'rmse'
# 5-fold cross-validation
nfolds = NFOLDS,
# valeurs élevée pour un entraînement plus rapide mais moins performant
thresh = 1e-4,
# On limite le nombre d'itérations
maxit = 1e4)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
},warning = function(w) {
print(paste("warning",w))
}, error = function(e) {
print(paste("error",e))
})
}
Gini(pred_glmtest)
smin
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100)
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-06,#par défaut
maxit=100000)
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-05,#par défaut
maxit=100000)
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se",Gini(pred_glmnettest)))
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin=",smin,"Gini=",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se=",sm1se,"Gini=",Gini(pred_glmnettest)))
s1se=glmnet_model$lambda.1se
smin=glmnet_model$lambda.min
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin=",smin,"Gini=",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s1se)[,1],obs=target_test)
print(paste("s=s1se=",s1se,"Gini=",Gini(pred_glmnettest)))
smin
s1se
s1se=glmnet_model$lambda.1se
s1se
glmnet_model$lambda
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
plot(glmnet_model, xvar='lambda')
plot(glmnet_model, xvar='lambda')+legend
plot(glmnet_model, xvar='lambda',label=T)
glmnet_model$lambda
smin=min(glmnet_model$lambda)
s=sample(glmnet_model$lambda,1)
smin=min(glmnet_model$lambda)
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin=",smin,"Gini=",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s)[,1],obs=target_test)
print(paste("s=random",s,"Gini=",Gini(pred_glmnettest)))
library(dplyr)
library(ggplot2)
library(plotly)
library(glmnet)
library(gbm)
load("../1_data_management_dplyr/fichiers_prepared.RData")
nb_chiffres_cod_com=nchar(finess_et$cod_com)
nb_chiffres_cod_com%>%table
finess_et[nb_chiffres_cod_com==1,]$cod_com <- paste0("00",finess_et[nb_chiffres_cod_com==1,]$cod_com)
finess_et[nb_chiffres_cod_com==2,]$cod_com <- paste0("0",finess_et[nb_chiffres_cod_com==2,]$cod_com)
finess_et <- finess_et%>%
mutate(CODGEO=paste0(dep,cod_com))
nb_ET_CODGEO=finess_et%>%
group_by(CODGEO)%>%
summarise(nb_ET=n())
sum(!nb_ET_CODGEO$CODGEO%in%insee$CODGEO)
nb_ET_CODGEO=merge(nb_ET_CODGEO,insee,by="CODGEO",all.y=T)
nb_ET_CODGEO <- nb_ET_CODGEO%>%mutate(nb_ET=ifelse(is.na(nb_ET),0,nb_ET))
table(nb_ET_CODGEO$nb_ET)%>%head
data_model <-  nb_ET_CODGEO%>%
select(-LIBGEO,-CODGEO)%>%
mutate_if(is.character,as.numeric)
train=sample(x = nrow(data_model),size = round(.65*nrow(data_model)))
data_model_imputed_for_glm=data_model%>%
mutate_all(function(x)ifelse(is.na(x),mean(x,na.rm=T),x))
model <- glm(nb_ET~.,
data=data_model_imputed_for_glm[train,],
family=poisson(link = "log"))
coeff_glm=summary(model)$coefficients
coeff_glm
pred_glmtrain=data.frame(pred=predict(model,newdata = data_model_imputed_for_glm[train,],type="response"), obs=data_model[train,]$nb_ET)
perf_train=data.frame(pred=data_model[train,]$nb_ET, obs=data_model[train,]$nb_ET)
pred_glmtest=data.frame(pred=predict(model,newdata = data_model_imputed_for_glm[-train,],type="response"),obs=data_model[-train,]$nb_ET)
perf_test=data.frame(pred=data_model[-train,]$nb_ET, obs=data_model[-train,]$nb_ET)
pred_glmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_glm_points
pred_glmtest%>%
na.omit%>%
arrange(-obs)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Perfection
g <- ggplot()+
geom_line(data = Lorenz_glm_points,
aes(x=x100,y=y100,color="glm"))+
geom_line(data = Perfection,
aes(x=x100,y=y100,color="perfection")) +
geom_line(data=data.frame(x100=c(0,1), yrandom=c(0,1)),
aes(x=x100,y=yrandom,color="random"))
g
Gini=function(pred){
pred%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
# print(paste0("nombre_de_lignes:",nrow(.)," indice de Gini:"))
2*mean(.$y)-1
}
}
Gini(pred_glmtest)
Gini(perf_test)
Gini(pred_glmtrain)
Gini(perf_train)
target_train = data_model_imputed_for_glm[train,]$nb_ET
explanatory_train = data_model_imputed_for_glm[train,]%>%
select(-nb_ET)%>%as.matrix
target_test = data_model_imputed_for_glm[-train,]$nb_ET
explanatory_test = data_model_imputed_for_glm[-train,]%>%
select(-nb_ET)%>%as.matrix
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-05,#par défaut
maxit=1e5)
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
# Distribution des coefficients en fonction du lambda.
plot(glmnet_model, xvar='lambda',label=T)
s=sample(glmnet_model$lambda,1)
glmnet_model <- glmnet(x=explanatory_train,
y=target_train,
family="poisson",
alpha=1,
nlambda=100,#par défaut
thresh = 1e-05,#par défaut
maxit=1e6)
plot(glmnet_model$lambda,glmnet_model$dev.ratio)
# Distribution des coefficients en fonction du lambda.
plot(glmnet_model, xvar='lambda',label=T)
s=sample(glmnet_model$lambda,1)
smin=min(glmnet_model$lambda)
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=0)[,1],obs=target_test)
print(paste("s=0",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=smin)[,1],obs=target_test)
print(paste("s=smin=",smin,"Gini=",Gini(pred_glmnettest)))
pred_glmnettest=data.frame(pred=predict(glmnet_model,newx = explanatory_test,type="response",s=s)[,1],obs=target_test)
print(paste("s=random",s,"Gini=",Gini(pred_glmnettest)))
3e-5
plot(glmnet_cv)
gbm_model <- gbm(nb_ET~.,data=data_model[train,])
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T)
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T,train.fraction=.8)
pred_gbmtest=data.frame(pred=predict(gbm_model,newdata = data_model[-train,]),obs=target_test)
print(paste("gbm:",Gini(pred_glmnettest)))
print(paste("gbm:",Gini(pred_gbmtest)))
print(paste("gbm:",Gini(pred_glmnettest)))
print(paste("glm:",Gini(pred_gbmtest)))
print(paste("glm:",Gini(pred_glmnettest)))
params=c(shrinkage=.1,
nb_trees=1000,
depth=10,
nminobs=10,
bag.frac=.2)
gbm_model <- gbm(nb_ET~.,data=data_model[train,],verbose=T,train.fraction=.8,shrinkage = params[1],n.trees = params[2],interaction.depth = params[3],n.minobsinnode = params[4],bag.fraction = params[5])
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,],
n.trees=params[2]),
obs=target_test)
print(paste("gbm:",Gini(pred_gbmtest)))
print(paste("glm:",Gini(pred_glmnettest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,],
n.trees=params[2]),
obs=target_train)
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,ntrees=params[2],
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
pred_gbmtest=data.frame(pred=predict(gbm_model,n.trees=params[2],
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
params=c(shrinkage=.01,
nb_trees=1000,
depth=10,
nminobs=10,
bag.frac=.2)
gbm_model <- gbm(nb_ET~.
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_glmnet_points
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_gbm_points
pred_gbmtest%>%
na.omit%>%
arrange(-pred)%>%
mutate(y=cumsum(obs)/sum(obs),x=(1:nrow(.))/nrow(.))%>%
{
data.frame(y100=quantile(.$y,0:100/100),
x100=quantile(.$x,0:100/100))
}->Lorenz_gbm_points
g <- g +
geom_line(data = Lorenz_gbm_points,
aes(x=x100,y=y100,color="gbm"))
g%>%ggplotly
summary(gbm_model)
vars=summary(gbm_model)
vars=summary(gbm_model)$var
plot(gbm_model,i.var=vars[1])
vars
vars=summary(gbm_model)$var%>%as.character
plot(gbm_model,i.var=vars[1])
plot(gbm_model,i.var=vars[1])
plot(gbm_model,i.var=vars[2])
plot(gbm_model,i.var=vars[3])
plot(gbm_model,i.var=vars[4])
monotony=rep(0,ncol(data_model)-1)
names(monotony) <- setdiff(names(data_model),"nb_ET")
monotony
monotony["NBMENFISC14"] <- 1
monotony
gbm_model <- gbm(nb_ET~.
,var.monotone = monotony
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
gbm_model <- gbm(nb_ET~.
,var.monotone = monotony
,data=data_model[train,]
,verbose=T
,train.fraction=.8
,shrinkage = params[1]
,n.trees = params[2]
,interaction.depth = params[3]
,n.minobsinnode = params[4]
,bag.fraction = params[5]
)
pred_gbmtrain=data.frame(pred=predict(gbm_model,
newdata = data_model[train,]),
obs=target_train)
pred_gbmtest=data.frame(pred=predict(gbm_model,
newdata = data_model[-train,]),
obs=target_test)
print(paste("gbm test:",Gini(pred_gbmtest)))
print(paste("gbm train:",Gini(pred_gbmtrain)))
print(paste("glm:",Gini(pred_glmnettest)))
